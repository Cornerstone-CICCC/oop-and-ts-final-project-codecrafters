---
// TodoCard.astro
import type { Todo } from "src/types/todo";

type Props = Todo;

const {
  title,
  status,
  dueDate,
  createdAt,
  updatedAt,
  tags,
  assignedTo,
  notes,
} = Astro.props;
---

<div class="todo-card">
  <div class="todo-container">
    <div class="title">{title}</div>
    <div class="status">{status}</div>
    <div class="due-date">{new Date(dueDate).toLocaleDateString()}</div>
    <div class="tags">{tags.join(", ") || "None"}</div>
    <div class="assigned-to">{assignedTo.join(", ") || "None"}</div>
    {notes && <div class="notes">{notes}</div>}
  </div>
  <div class="todo-actions">
    <button class="edit-button">Edit</button>
    <button class="delete-button">Delete</button>
  </div>
</div>

<script>
  class TodoCard extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      this.render();
      this.addEventListeners();
    }

    render() {
      const title = this.dataset.title || "";
      const status = this.dataset.status || "";
      const dueDate = this.dataset.dueDate
        ? new Date(this.dataset.dueDate).toLocaleDateString()
        : "";
      const tags = JSON.parse(this.dataset.tags || "[]");
      const assignedTo = JSON.parse(this.dataset.assignedTo || "[]");
      const notes = this.dataset.notes || "";

      this.innerHTML = `
        <div class="todo-container">
          <div class="title">${title}</div>
          <div class="status">${status}</div>
          <div class="due-date">${dueDate}</div>
          <div class="tags">${tags.join(", ") || "None"}</div>
          <div class="assigned-to">${assignedTo.join(", ") || "None"}</div>
          ${notes ? `<div class="notes">${notes}</div>` : ""}
        </div>
        <div class="todo-actions">
          <button class="edit-button">Edit</button>
          <button class="delete-button">Delete</button>
        </div>
      `;
    }

    addEventListeners() {
      const editButton = this.querySelector(".edit-button");
      const deleteButton = this.querySelector(".delete-button");

      editButton?.addEventListener("click", () => {
        // Edit functionality
        console.log("Edit clicked");
      });

      deleteButton?.addEventListener("click", () => {
        // Delete functionality
        console.log("Delete clicked");
      });
    }
  }

  customElements.define("todo-card", TodoCard);
</script>

<style>
  todo-card {
    display: block;
    border: 1px solid #ddd;
    padding: 1rem;
    margin-bottom: 1rem;
    border-radius: 4px;
  }

  .todo-container {
    margin-bottom: 1rem;
  }

  .title {
    font-weight: bold;
    font-size: 1.1em;
    margin-bottom: 0.5rem;
  }

  .status {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    background-color: #e9ecef;
    border-radius: 4px;
    margin-bottom: 0.5rem;
  }

  .tags span,
  .assigned-to span {
    display: inline-block;
    padding: 0.2rem 0.5rem;
    border-radius: 4px;
    margin-right: 0.5rem;
  }

  .todo-actions {
    display: flex;
    gap: 0.5rem;
  }

  button {
    padding: 0.5rem 1rem;
    border-radius: 4px;
    border: none;
    cursor: pointer;
  }

  .edit-button {
    background-color: #007bff;
    color: white;
  }

  .delete-button {
    background-color: #dc3545;
    color: white;
  }
</style>
