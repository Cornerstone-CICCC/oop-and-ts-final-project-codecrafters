---
// TodoGroup.astro
import BaseModal from "./Modal/BaseModal.astro";
import CreateTodo from "./Modal/Content/CreateTodo.astro";
import TodoCard from "./TodoCard.astro";
---

<section class="main-container">
  <div class="Board">
    <div>
      <h2>Todo List</h2>
      <div id="todoList"></div>
      <button id="add-todo">Add Todo</button>
    </div>
    <BaseModal title={"Create Todo"}>
      <CreateTodo />
    </BaseModal>
  </div>
</section>

<script>
  import type { Todo } from "src/types/todo";
  import { TodoContext } from "@contexts/todoContext";
  import { TodoService } from "@services/todoService";

  document.addEventListener("DOMContentLoaded", () => {
    const todoContext = TodoContext.getInstance();
    const todoList = document.getElementById("todoList");

    const todoService = new TodoService();

    function renderTodo(todo: Todo): string {
      return `
        <div class="todo-card">
          <div class="todo-container">
            <div class="title">${todo.title}</div>
            <div class="status">${todo.status}</div>
            <div class="due-date">${new Date(todo.dueDate).toLocaleDateString()}</div>
            <div class="tags">${todo.tags.join(", ") || "None"}</div>
            <div class="assigned-to">${todo.assignedTo.join(", ") || "None"}</div>
            ${todo.notes ? `<div class="notes">${todo.notes}</div>` : ""}
          </div>
          <div class="todo-actions">
            <button class="edit-button" data-todo-id="${todo.title}">Edit</button>
            <button class="delete-button" data-todo-id="${todo.id}">Delete</button>
          </div>
        </div>
      `;
    }

    function renderTodos() {
      if (!todoList) return;

      const todos = todoContext.getTodos();

      const todoElements = todos.map((todo) => renderTodo(todo)).join("");
      todoList.innerHTML = todoElements;

      addEventListeners();
    }

    function addEventListeners() {
      const editButtons = document.querySelectorAll(".edit-button");
      const deleteButtons = document.querySelectorAll(".delete-button");

      editButtons.forEach((button) => {
        button.addEventListener("click", (e) => {
          const todoId = (e.target as HTMLButtonElement).dataset.todoId;
          if (todoId) {
            handleEdit(todoId);
          }
        });
      });

      deleteButtons.forEach((button) => {
        button.addEventListener("click", (e) => {
          const todoId = (e.target as HTMLButtonElement).dataset.todoId;
          if (todoId) {
            handleDelete(todoId);
          }
        });
      });
    }

    function handleEdit(todoId: string) {
      console.log("Edit todo:", todoId);
    }

    function handleDelete(todoId: string) {
      if (confirm("このTodoを削除しますか？")) {
        todoService.deleteTodo(todoId);
        renderTodos();
      }
    }

    renderTodos();

    document.addEventListener("todosUpdated", () => {
      renderTodos();
    });

    const addTodoButton = document.getElementById("add-todo");
    if (addTodoButton) {
      addTodoButton.addEventListener("click", () => {
        const modal = document.querySelector(".modal") as HTMLDivElement;
        const modalOverlay = document.querySelector(
          ".modal-overlay",
        ) as HTMLDivElement;
        if (modal && modalOverlay) {
          modal.style.display = "flex";
          modalOverlay.style.display = "block";
        }
      });
    }
  });
</script>
