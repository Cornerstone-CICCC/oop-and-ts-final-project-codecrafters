---
// TodoGroup.astro
import BaseModal from "./Modal/BaseModal.astro";
import CreateTodo from "./Modal/Content/CreateTodo.astro";
import UpdateTodo from "./Modal/Content/UpdateTodo.astro";
import { TodoContext } from "@contexts/todoContext";

// Global type declaration for modalControls
declare global {
  interface Window {
    modalControls?: {
      [key: string]: {
        show: () => void;
        close: () => void;
      };
    };
  }
}
---

<!-- <section class="main-container">
  <div class="Board">
    <div>
      <h2>Task List</h2>
      <div id="todoList"></div>
      <button id="add-todo">Add Task</button>
    </div>
    <BaseModal title={"Create Task"} id="create-todo-modal">
      <CreateTodo />
    </BaseModal>
    <BaseModal title={"Update Task"} id="update-todo-modal">
      <UpdateTodo />
    </BaseModal>
  </div>
</section> -->

<section class="main-container">

  <div>
    <BaseModal title={"Create Todo"} id="create-todo-modal">
      <CreateTodo />
    </BaseModal>
    <BaseModal title={"Update Todo"} id="update-todo-modal">
      <UpdateTodo />
  </div>

  <h2>Codebreakers</h2>
  <div class="Board column">
      <div class="todo column">
          <div class="header-board">
              <h3>Todo</h3>
              <div class="options-board">
                  <button class="add" id="add-todo"><img src="../../public/add.svg"></button>
              </div>
          </div>
          <div id="todo-add"  class="column-add todo-add" ondrop="dropMe(event)" ondragover="allowDrop(event)">
          </div>
      </div>
      <div class="In-progress column">
          <div class="header-board">
              <h3>In Progress</h3>
              <div class="options-board">
                  <button class="add"id="add-todo"><img src="../../public/add.svg"></button>
              </div>
          </div>
          <div id="in-progress" class="column-add in-progress" ondrop="dropMe(event)" ondragover="allowDrop(event)">
          </div>
      </div>
      <div class="Done column">
          <div class="header-board">
              <h3>Finished</h3>
              <div class="options-board">
                  <button class="add"id="add-todo"><img src="../../public/add.svg"></button>
              </div>
          </div>
          <div id="todo-done" class="column-add done" ondrop="dropMe(event)" ondragover="allowDrop(event)" data-todos=`${UpdateTodo}`>
          </div>
      </div>
  </div>  
</section>

<script>
  import { TodoCard } from "./TodoCard";
  import { TodoContext } from "@contexts/todoContext";
  import { TodoService } from "@services/todoService";
  import { handleEdit } from "@utils/handleEdit";
  
  document.addEventListener("DOMContentLoaded", () => {
    const todoContext = TodoContext.getInstance();
    const todoList = document.getElementById("todo-add");
    const inProgress = document.getElementById("in-progress");
    const finish = document.getElementById("todo-done")

    const todoService = new TodoService();

    function renderTodos() {
      if (!todoList) return;
      if (!inProgress) return;
      if (!finish) return;

      todoList.innerHTML = ""
      inProgress.innerHTML = ""
      finish.innerHTML = ""

      const todos = todoContext.getTodos();
      todos.forEach(todo => {
        let todoItem = TodoCard(todo)
        if(todo.status === "todo"){
          todoList.innerHTML += todoItem
        }
        if(todo.status === "in-progress"){
          inProgress.innerHTML += todoItem
        }
        if(todo.status === "done"){
          finish.innerHTML += todoItem
        }
      })
      // const todoElements = todos.map((todo) => TodoCard(todo)).join("");
      //todoList.innerHTML = todoElements;
      addEventListeners();
    }

    function showModal(modalId: string) {
      const modalControls = window.modalControls;
      if (!modalControls) {
        console.error("modalControls not found");
        return;
      }
      modalControls[modalId].show();
    }

    function addEventListeners() {
      const editButtons = document.querySelectorAll(".edit-button");
      const deleteButtons = document.querySelectorAll(".delete-button");

      editButtons.forEach((button) => {
        button.replaceWith(button.cloneNode(true));
      });

      document.querySelectorAll(".edit-button").forEach((button) => {
        button.addEventListener("click", (e) => {
          e.preventDefault();
          const todoId = (e.currentTarget as HTMLButtonElement).dataset.todoId;
          if (todoId) {
            handleEdit(todoId);
          }
        });
      });

      deleteButtons.forEach((button) => {
        button.addEventListener("click", (e) => {
          e.preventDefault();
          const todoId = (e.currentTarget as HTMLButtonElement ).dataset.todoId;
          if (todoId) {
            handleDelete(todoId);
          }
        });
      });
    }

    function handleDelete(todoId: string) {
      if (confirm("Are you sure you want to delete this Task?")) {
        todoService.deleteTodo(todoId);
        renderTodos();
      }
    }

    renderTodos();

    const addTodoButtons = document.querySelectorAll("#add-todo");
    addTodoButtons.forEach(addTodoBtn =>{
      if (addTodoBtn) {
      addTodoBtn.addEventListener("click", () => {
        showModal("create-todo-modal");
      });
    }
    })

    const todos = document.querySelectorAll(".todo-card")
    todos.forEach(todo => {

      if(todo){
        const parent = todo.parentElement
        todo.addEventListener("dragend",()=>{
        if(todo.parentElement !== parent){
          Changuestatus(todoContext, todo, todoService)
        }
      }) 
      }
    })
});
function Changuestatus(todoContext: TodoContext, todo: Element, todoService: TodoService) {
    const listTodos = todoContext.getTodos()
    listTodos.forEach(todoItem =>{
      if(todoItem.id === todo.id){
        console.log(todo.parentElement?.id)
        if(todo.parentElement?.id === "todo-done"){
          todoService.toggleTodoStatus(todoItem.title, "done")
        }
        if(todo.parentElement?.id=== "in-progress"){
          todoService.toggleTodoStatus(todoItem.title, "in-progress")
        }
        if(todo.parentElement?.id === "todo-add"){
          todoService.toggleTodoStatus(todoItem.title, "todo")
        }
      } 
    })
}
</script>

<script is:inline>
  // drag and drop
  function allowDrop(ev){
        ev.preventDefault();
    }

    function drag(ev){
      ev.dataTransfer.setData("text", ev.target.id);
		}

    function dropMe(ev) {
        ev.preventDefault();
        var data = ev.dataTransfer.getData("text");
        console.log(data)
        ev.target.appendChild(document.getElementById(data));
    }
    
  function noAllowDrop(ev) {
          ev.stopPropagation();
      }
</script>
