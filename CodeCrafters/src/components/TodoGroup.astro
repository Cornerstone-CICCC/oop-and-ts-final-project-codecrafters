---
// TodoGroup.astro
import BaseModal from "./Modal/BaseModal.astro";
import CreateTodo from "./Modal/Content/CreateTodo.astro";
import UpdateTodo from "./Modal/Content/UpdateTodo.astro";

// Global type declaration for modalControls
declare global {
  interface Window {
    modalControls?: {
      [key: string]: {
        show: () => void;
        close: () => void;
      };
    };
  }
}
---

<section class="main-container">
  <div class="Board">
    <div>
      <h2>Todo List</h2>
      <div id="todoList"></div>
      <button id="add-todo">Add Todo</button>
    </div>
    <BaseModal title={"Create Todo"} id="create-todo-modal">
      <CreateTodo />
    </BaseModal>
    <BaseModal title={"Update Todo"} id="update-todo-modal">
      <UpdateTodo />
    </BaseModal>
  </div>
</section>

<script>
  import { TodoCard } from "./TodoCard";
  import { TodoContext } from "@contexts/todoContext";
  import { TodoService } from "@services/todoService";
  import { handleEdit } from "@utils/handleEdit";

  document.addEventListener("DOMContentLoaded", () => {
    const todoContext = TodoContext.getInstance();
    const todoList = document.getElementById("todoList");

    const todoService = new TodoService();

    function renderTodos() {
      if (!todoList) return;

      const todos = todoContext.getTodos();

      const todoElements = todos.map((todo) => TodoCard(todo)).join("");
      todoList.innerHTML = todoElements;

      addEventListeners();
    }

    function showModal(modalId: string) {
      const modalControls = window.modalControls;
      if (!modalControls) {
        console.error("modalControls not found");
        return;
      }
      modalControls[modalId].show();
    }

    function addEventListeners() {
      const editButtons = document.querySelectorAll(".edit-button");
      const deleteButtons = document.querySelectorAll(".delete-button");

      editButtons.forEach((button) => {
        button.replaceWith(button.cloneNode(true));
      });

      document.querySelectorAll(".edit-button").forEach((button) => {
        button.addEventListener("click", (e) => {
          e.preventDefault();
          const todoId = (e.currentTarget as HTMLButtonElement).dataset.todoId;
          console.log("Edit clicked for:", todoId);
          if (todoId) {
            handleEdit(todoId);
          }
        });
      });

      deleteButtons.forEach((button) => {
        button.addEventListener("click", (e) => {
          e.preventDefault();
          const todoId = (e.currentTarget as HTMLButtonElement).dataset.todoId;
          if (todoId) {
            handleDelete(todoId);
          }
        });
      });
    }

    function handleDelete(todoId: string) {
      if (confirm("Are you sure you want to delete this todo?")) {
        todoService.deleteTodo(todoId);
        renderTodos();
      }
    }

    renderTodos();

    const addTodoButton = document.getElementById("add-todo");
    if (addTodoButton) {
      addTodoButton.addEventListener("click", () => {
        showModal("create-todo-modal");
      });
    }
  });
</script>
