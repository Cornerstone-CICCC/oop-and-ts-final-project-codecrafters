---
import "@styles/style.css";

type Props = {
  name: string;
  category: string;
  options: { value: string; label: string }[];
  defaultValue?: string;
};

const { name, category, options, defaultValue } = Astro.props;
const defaultPlaceholder = `Select an ${category}`;
---

<div class="single-select" data-name={name} data-default-value={defaultValue}>
  <div
    class="select-box"
    id={`select-box-${name}`}
    data-default-text={defaultPlaceholder}
  >
    {
      options.find((option) => option.value === defaultValue)?.label ||
        defaultPlaceholder
    }
  </div>
  <ul class="options" id={`options-list-${name}`}>
    {
      options.map((option) => (
        <li class="option" data-value={option.value} data-label={option.label}>
          {option.label}
        </li>
      ))
    }
  </ul>
  <input
    type="hidden"
    id={`hidden-input-${name}`}
    name={name}
    value={defaultValue || ""}
  />
</div>

<script>
  class SingleSelect {
    private selectBox: HTMLDivElement;
    private optionsList: HTMLUListElement;
    private hiddenInput: HTMLInputElement;
    private container: HTMLElement;
    private defaultText: string;
    private defaultValue: string;

    constructor(container: HTMLElement) {
      this.container = container;
      this.selectBox = container.querySelector(".select-box") as HTMLDivElement;
      this.optionsList = container.querySelector(
        ".options",
      ) as HTMLUListElement;
      this.hiddenInput = container.querySelector(
        "input[type='hidden']",
      ) as HTMLInputElement;
      this.defaultText =
        this.selectBox.dataset.defaultText || "Select an option";
      this.defaultValue = container.dataset.defaultValue || "";

      this.initialize();
    }

    private initialize() {
      this.selectBox.addEventListener(
        "click",
        this.handleSelectBoxClick.bind(this),
      );

      const options = this.optionsList.querySelectorAll(".option");
      options.forEach((option) => {
        option.addEventListener("click", this.handleOptionClick.bind(this));
      });

      const form = this.container.closest("form");
      if (form) {
        form.addEventListener("reset", this.handleReset.bind(this));
      }

      const closeButton = document.getElementById("closeModal");
      if (closeButton) {
        closeButton.addEventListener("click", this.handleReset.bind(this));
      }

      const modalOverlay = document.getElementById("modalOverlay");
      if (modalOverlay) {
        modalOverlay.addEventListener("click", this.handleReset.bind(this));
      }

      if (!window.singleSelects) {
        window.singleSelects = new Map();
      }

      const name = this.container.dataset.name || "";
      window.singleSelects.set(name, this);
    }

    private handleSelectBoxClick() {
      this.optionsList.classList.toggle("active");
    }

    private handleOptionClick(event: Event) {
      const option = event.currentTarget as HTMLElement;
      const value = option.dataset.value;
      const label = option.dataset.label;

      if (value && label) {
        this.selectBox.textContent = label;
        this.hiddenInput.value = value;
      }

      this.optionsList.classList.remove("active");
    }

    private handleReset() {
      this.reset();
    }

    public reset() {
      if (this.defaultValue) {
        const defaultOption = Array.from(
          this.optionsList.querySelectorAll(".option"),
        ).find(
          (opt) => (opt as HTMLElement).dataset.value === this.defaultValue,
        );

        if (defaultOption) {
          this.selectBox.textContent =
            (defaultOption as HTMLElement).dataset.label || this.defaultText;
          this.hiddenInput.value = this.defaultValue;
        } else {
          this.selectBox.textContent = this.defaultText;
          this.hiddenInput.value = "";
        }
      } else {
        this.selectBox.textContent = this.defaultText;
        this.hiddenInput.value = "";
      }

      this.optionsList.classList.remove("active");
    }
  }

  declare global {
    interface Window {
      singleSelects?: Map<string, SingleSelect>;
      closeModal?: () => void;
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".single-select").forEach((container) => {
      new SingleSelect(container as HTMLElement);
    });

    const cancelButton = document.querySelector(
      ".cancel-button",
    ) as HTMLButtonElement;
    if (cancelButton) {
      const originalClickHandler = cancelButton.onclick;
      cancelButton.onclick = (event) => {
        if (originalClickHandler) {
          originalClickHandler.call(cancelButton, event);
        }

        window.singleSelects?.forEach((select) => select.reset());
      };
    }

    const originalCloseModal = window.closeModal;
    window.closeModal = () => {
      if (originalCloseModal) {
        originalCloseModal();
      }

      window.singleSelects?.forEach((select) => select.reset());
    };
  });
</script>
