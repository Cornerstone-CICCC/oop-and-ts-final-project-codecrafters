---
import "@styles/style.css";
import { IoClose } from "react-icons/io5";

type Props = {
  title: string;
  id: string;
};
declare global {
  interface Window {
    modalControls?: {
      [key: string]: {
        show: () => void;
        close: () => void;
      };
    };
  }
}

const { title, id } = Astro.props;
---

<div class="modal-wrapper" data-modal-id={id}>
  <div class="modal-overlay"></div>
  <div class="modal">
    <div class="modal-container">
      <div class="modal-header">
        <div class="modal-header-title">
          <h3>{title}</h3>
        </div>
        <div class="modal-header-close">
          <button class="modal-close-button">
            <IoClose size="1.5em" className="close-icon" />
          </button>
        </div>
      </div>
      <slot />
    </div>
  </div>
</div>

<script>
  import { TodoModalType } from "@utils/todoModalType";

  class ModalController {
    private wrapper: HTMLElement;
    private modal: HTMLElement;
    private overlay: HTMLElement;
    private closeButton: HTMLElement;
    private modalId: string;

    constructor(wrapper: HTMLElement) {
      this.wrapper = wrapper;
      this.modalId = wrapper.dataset.modalId || "";
      this.modal = wrapper.querySelector(".modal") as HTMLElement;
      this.overlay = wrapper.querySelector(".modal-overlay") as HTMLElement;
      this.closeButton = wrapper.querySelector(
        ".modal-close-button",
      ) as HTMLElement;

      this.initialize();
    }

    private initialize() {
      this.closeButton.addEventListener("click", () => {
        this.close();
      });

      this.overlay.addEventListener("click", () => {
        this.close();
        this.resetAddTodoForm();
      });

      document.addEventListener("keydown", (event) => {
        if (event.key === "Escape" && this.isOpen()) {
          this.close();
          this.resetAddTodoForm();
        }
      });
    }

    private isOpen(): boolean {
      return this.wrapper.classList.contains("is-open");
    }

    show() {
      document.querySelectorAll(".modal-wrapper").forEach((wrapper) => {
        if (wrapper !== this.wrapper) {
          wrapper.classList.remove("is-open");
        }
      });

      this.wrapper.classList.add("is-open");
      this.modal.style.display = "block";
      this.overlay.style.display = "block";
    }

    close() {
      this.wrapper.classList.remove("is-open");
      this.modal.style.display = "none";
      this.overlay.style.display = "none";

      const event = new CustomEvent("modalClose", {
        detail: { modalId: this.modalId },
      });
      document.dispatchEvent(event);
    }

    resetAddTodoForm() {
      if (this.modalId === TodoModalType.CREATE) {
        const form = document.getElementById(
          "add-todo-form",
        ) as HTMLFormElement;
        form.reset();
      }
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    window.modalControls = {};

    document.querySelectorAll(".modal-wrapper").forEach((wrapper) => {
      const modalId = (wrapper as HTMLElement).dataset.modalId;
      if (modalId) {
        const controller = new ModalController(wrapper as HTMLElement);
        const modalControls = window.modalControls;
        if (!modalControls) return;
        modalControls[modalId] = {
          show: () => controller.show(),
          close: () => controller.close(),
        };
      }
    });
  });
</script>
