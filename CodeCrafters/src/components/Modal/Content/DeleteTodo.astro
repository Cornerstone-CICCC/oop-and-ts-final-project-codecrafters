---
import "@styles/style.css";
---

<form class="delete-form" id="delete-todo-form">
  <input type="hidden" name="id" id="todo-id" />

  <div class="delete-form-body">
    <label class="delete-form-message">Are you sure you want to delete this task?</label>
    <p id="todo-title" class="todo-title"></p>
  </div>

  <div class="delete-form-footer">
    <button type="reset" class="cancel-button">Cancel</button>
    <button type="submit" class="delete-button">Delete</button>
  </div>
</form>

<script>
  import { TodoService } from "@services/todoService";
  import type { Todo } from "src/types/todo";
  import { handleEdit } from "@utils/handleEdit";
  import { TodoCard } from "@components/TodoCard";
  import { handleDelete } from "@utils/handleDelete";
  const todoService = new TodoService();
  const todoList = document.getElementById("todoList") as HTMLDivElement;

  const deleteTodo = async (event: SubmitEvent) => {
    event.preventDefault();
    const form = document.getElementById("delete-todo-form") as HTMLFormElement;
    const formData = new FormData(form);
    const id = formData.get("id") as string;

    const updatedTodos = todoService.deleteTodo(id);
    renderTodos(updatedTodos);

    closeModal();
    formReset();
  };

  const form = document.getElementById("delete-todo-form") as HTMLFormElement;
  form.addEventListener("submit", deleteTodo);

  const formReset = () => {
    const form = document.getElementById("delete-todo-form") as HTMLFormElement;
    form.reset();
  };

  const renderTodos = (todos: Todo[]) => {
    todoList.innerHTML = "";

    const todoElements = todos.map((todo) => TodoCard(todo)).join("");
    todoList.innerHTML = todoElements;

    addEventListeners();
  };

  function addEventListeners() {
    if(!todoList) return;
    const editButtons = todoList.querySelectorAll(".edit-button");
    const deleteButtons = todoList.querySelectorAll(".delete-button");

    editButtons.forEach((button) => {
      button.addEventListener("click", (e) => {
        e.preventDefault();
        const todoId = (e.currentTarget as HTMLButtonElement).dataset.todoId;
        if (todoId) {
          handleEdit(todoId);
        }
      });
    });

    deleteButtons.forEach((button) => {
      button.addEventListener("click", (e) => {
        e.preventDefault();
        const todoId = (e.currentTarget as HTMLButtonElement).dataset.todoId;
        if (todoId) {
          handleDelete(todoId);
        }
      });
    });
    
  }



  const cancelButton = form.querySelector(
    ".cancel-button",
  ) as HTMLButtonElement;
  if (cancelButton) {
    cancelButton.addEventListener("click", () => {
      closeModal();
      formReset();
    });
  }

  const closeModal = () => {
    const modalControls = window.modalControls;
    if (!modalControls) return;
    modalControls["delete-todo-modal"].close();
  };
</script>
